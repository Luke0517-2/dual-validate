trigger:
  - newman-test

pool:
  vmImage: 'ubuntu-latest'

variables:
  dual-validate-postman-script: CHT_MOrder_Dual-validate.postman_collection.json
  baseUrl: http://dual-validate-d210641.apps.ocp.iisi.test
  floderName: wildflyVerify
  fileName: origin

stages:
- stage: dual_validate_newman
  displayName: dual_validate_newman
  jobs:
  - job: dual_validate_newman
    displayName: dual_validate_newman
    timeoutInMinutes: 360 # how long to run the job before automatically cancelling
    steps:
      # 主機環境設定
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            
            sudo -- sh -c "echo '60.250.171.28    dual-validate-d210641.apps.ocp.iisi.test' >> /etc/hosts"
            
            echo 'hosts檔案內容'
            cat /etc/hosts
            
            echo '目前路徑'
            pwd
            
            export BUILD_NUMBER=$(Build.BuildNumber)
            echo 'build 編號  #'${BUILD_NUMBER}
            
            timedatectl
            echo 'set timezone to Asia/Taipei'
            sudo timedatectl set-timezone Asia/Taipei
            timedatectl
            
            echo '產生結果報表放置的目錄'
            mkdir $(Build.SourcesDirectory)/report
            echo $(Build.SourcesDirectory)/report
        displayName: 'set env'

      - task: NodeTool@0
        inputs:
          versionSpec: '16.x'

      - script: |
          npm install -g newman
          npm install -g newman-reporter-html
        displayName: 'install newman'
        
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |            
            mkdir $(floderName)

            echo $(fileName)
            date1=$(date +%Y%m%d)                      # 今天的日期
            number=$(ls $(Build.SourcesDirectory)/$(floderName)/*.csv | wc -l)   # 目前資料內資料筆數
            echo ${date1}
            echo ${number}
            
            file1=$(floderName)_${date1}_${number}      # 設定檔名
            str1='"telNum","custId"'
            str2=$(sed -n '1,1p' $(Build.SourcesDirectory)/$(floderName)/${file1}.csv)
            echo 變數名 : ${str1}
            echo 檔案表頭名 : ${str2}
            if [ ${str1} = ${str2} ]
            then
              echo '不須修改檔案';
            else
              echo '添加header'
              sed -i -e '1i"telNum","custId"' $(Build.SourcesDirectory)/$(floderName)/${file1}.csv
              head=$(sed -n '1,1p' $(Build.SourcesDirectory)/$(floderName)/${file1}.csv)
              echo ${head}
            fi
        continueOnError: false
        displayName: 'add floder and check csv-header'



      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |

            echo '開始進行驗證測試，會重新統計報表'
            UUID=$(curl -s '$(baseUrl)/cht/validate/startTest' | jq -r '.uuid')
            echo  $UUID
            head=$(sed -n '1,1p' $(Build.SourcesDirectory)/$(floderName)/${file1}.csv)
              echo ${head}
            echo '透過聯單號碼取得既有系統的聯單並進行新舊查核機制比對'
            newman run $(Build.SourcesDirectory)/$(dual-validate-postman-script) --env-var="baseUrl=$(baseUrl)" -d $(Build.SourcesDirectory)/$(floderName)/${file1}.csv --global-var="uuid=$UUID" --folder 透過聯單號碼取得既有系統的聯單並進行新舊查核機制比對
            
            echo '取得現行統計報表，產出Zip檔案'
            curl -o $(Build.SourcesDirectory)/report/report.zip --request GET -H "uuid: $UUID" '$(baseUrl)/cht/validate/currentReportWithZip'
            ls $(Build.SourcesDirectory)/report
            
            echo '清除目前的驗證測試，會清空相關測試資料'
            curl --request GET -H "uuid: $UUID" '$(baseUrl)/cht/validate/stopTest'
            
            echo ' 成功執行'
        continueOnError: false
        displayName: '執行雙軌驗證'
        
      - task: PublishPipelineArtifact@1
        continueOnError: true
        inputs:
          targetPath: $(Build.SourcesDirectory)/report
          artifact: 'report'
        displayName: '上傳 report'